<?php

namespace Admin\Controller;

use App\Controller\AppController as BaseController;
use Cake\Event\Event;
use Cake\Auth\DefaultPasswordHasher;
use Cake\ORM\Query;

class AppController extends BaseController {

    public $usuarioLogado;
    public $url;

    /**
     * Initialization hook method.
     *
     * Use this method to add common initialization code like loading components.
     *
     *
     * @return void
     */
    public function initialize() {
        // TODO: Change the autogenerated stub
        parent::initialize();
        $this->usuarioLogado = $this->Auth->user();
        $this->url = $_SERVER["REQUEST_URI"];
        if (isset($this->usuarioLogado) && $this->usuarioLogado['regra'] != "Admin") {
            $this->redirect('/');
        }
        $this->loadComponent('RequestHandler');
        //Carregando component Breadcrumb
        $this->loadComponent('Breadcrumb');
        //Carregando component Sidebarleft
        $this->loadComponent('Sidebarleft');
        //Relacionamento das tabelas usuarios e secoes
        $this->loadModel('Usuarios')
                ->belongsToMany('Secoes', [
                    'foreignKey' => 'usuario_id',
                    'targetForeignKey' => 'secao_id',
                    'joinTable' => 'usuarios_secoes',
                    'className' => 'Admin.Secoes',
                    'order' => [
                        'Secoes.titulo' => 'DESC'
                    ]
        ]);
        //Relacionamento tabelas secoes e usuarios
        $this->loadModel('Secoes')
                ->belongsToMany('Usuarios', [
                    'foreignKey' => 'secao_id',
                    'targetForeignKey' => 'usuario_id',
                    'joinTable' => 'usuarios_secoes',
                    'className' => 'Admin.Usuarios',
                    'order' => [
                        'Secoes.titulo' => 'DESC'
                    ]
        ]);
        //Relacionamento das secoes níveis 2
        $this->loadModel('Secoes')
                ->hasMany('SubSecao', [
                    'foreignKey' => 'secao_id',
                    'joinType' => 'INNER',
                    'className' => 'Admin.Secoes',
                    'conditions' => [
                        'nivel <' => 3,
                        'excluido' => 0
                    ],
                    'order' => ['SubSecao.titulo DESC']
        ]);
    }

    public function beforeFilter(Event $event) {
        parent::beforeFilter($event);
    }

    public function beforeRender(Event $event) {

        if (!array_key_exists('_serialize', $this->viewVars) &&
                in_array($this->response->type(), ['application/json', 'application/xml'])
        ) {
            $this->set('_serialize', true);
        }
        //Setando parâmetros para o component Breadcrumb.
        $this->setBreadCrumbs();
        //Retornando a string com o Breadcrumb para o layout default.
        $this->getBreadCrumbs();

        //Setando todas as seções contendo as subseções nível 2 para o layout default.
        $this->set('secoes', $this->Secoes->find('all', ['order' => [
                                'Secoes.titulo ASC'
                            ]
                        ])->contain(['SubSecao'])
                        ->toArray());
        //Setando as sideBarLeft para o layout default.
        $this->set('sideBarLeft', $this->setSideBarLeft());
        //Setando o valor digitado na url para o layout default.
        $this->set('url', $this->url);
    }

    /**
     * retornarSecoesUsuarios method
     * @param int|null $id Galeria id.
     * @return array|null
     */
    protected function retornarSecoesUsuarios($id = NULL) {
        if (isset($id)) {
            $query = $this->Usuarios->find('all', [
                        'conditions' => [
                            'id' => $id
                        ]
                    ])->contain([
                        'Secoes' => [
                            'conditions' => [
                                'Secoes.nivel' => 1
                            ],
                            'queryBuilder' => function (Query $q) {
                        return $q->order(['Secoes.titulo' => 'ASC']);
                    }
                        ]
                    ])
                    ->toArray();

            return $query;
        }
    }

    /**
     * getBreadCrumbs method
     *
     */
    protected function getBreadCrumbs() {
        $this->set('crumb', $this->Breadcrumb->getCrumb());
    }

    /**
     * setBreadCrumbs method
     *
     */
    protected function setBreadCrumbs() {
        $this->loadModel("Secoes");
        $secoes = $this->Secoes->find('all', ['order' => 'nivel ASC'])->toArray();
        foreach ($secoes as $secao) {
            $referencias = explode("#", $secao->referencia);
            while ($referencia = array_pop($referencias)) {
                if (strpos($_SERVER["REQUEST_URI"], $referencia) !== false) {
                    $link = ($secao->link) ? BASE . "/" . $this->plugin . "/" . $secao->link : 'javascript::void(0);';
                    $this->Breadcrumb->setCrumb($secao->titulo, $link);
                    break;
                }
            }
        }
    }

    /**
     * setSideBarLeft method
     * @return string
     */
    protected function setSideBarLeft() {

        $usuariosSecoes = $this->retornarSecoesUsuarios($this->Auth->user('id'));

        $subsecoesUsuarios = $this->Usuarios->find('all', [
                    'conditions' => [
                        'id' => $this->Auth->user('id')
                    ]
                ])
                ->contain(['Secoes' => [
                        'conditions' => [
                            'Secoes.nivel' => 2
                        ],
                        'queryBuilder' => function (Query $q) {
                    return $q->order(['Secoes.titulo' => 'ASC']);
                }
                    ]
                ])
                ->toArray();



        return $this->Sidebarleft->setSideBarLeft($subsecoesUsuarios, $usuariosSecoes, $this->url);
    }

    public function verificarPermissoes() {
        $usuariosSecoes = $this->Usuarios->find('all', [
                            'conditions' => [
                                'id' => (int) $this->usuarioLogado
                            ]
                        ])
                        ->contain([
                            'Secoes'
                        ])->toArray();

        if (!empty($usuariosSecoes)) {
            foreach ($usuariosSecoes[0]->secoes as $usuariosSecao) {
                if ($this->removeAcentuacao($usuariosSecao->titulo) == $this->name) {
                    return true;
                }
            }
        }
        return false;
    }

    protected function removeAcentuacao($string) {
        $acentos = [
            "/(á|à|ã|â|ä)/",
            "/(Á|À|Ã|Â|Ä)/",
            "/(é|è|ê|ë)/",
            "/(É|È|Ê|Ë)/",
            "/(í|ì|î|ï)/",
            "/(Í|Ì|Î|Ï)/",
            "/(ó|ò|õ|ô|ö)/",
            "/(Ó|Ò|Õ|Ô|Ö)/",
            "/(ú|ù|û|ü)/",
            "/(Ú|Ù|Û|Ü)/",
            "/(ñ)/",
            "/(Ñ)/"
        ];

        $trocarPor = "a A e E i I o O u U n N";
        $retorno = preg_replace($acentos, explode(" ", $trocarPor), $string);
        return $retorno;
    }

}
